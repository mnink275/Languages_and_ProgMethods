1) Наследование - создаётся производный класс, который получает функции
базового класса, может обращаться к незакрытым (publicm, protected) данным.
Конструктор производного класса должен передавать аргументы конструктору 
базового класса (в обратном случае конструктор базового класса выставит значения
по умолчанию).

2) Открытое наследование:
class HourlyWorker : public Enployee {};
Свободные элементы базового класса становятся свободными элементами производного
класса, защищённые - защищёнными, закрытые - недоступны (непосредственно) для
производного класса (только через функцию-элемент).

Защищённое наследоване:
Открытые и защищённые элементы базового класса становятся 'защищёнными' элементами
производного класса.

Закрытое наследование:
Открытые и защищённые элементы базового класса становятся 'закрытыми' элементами
производного класса.

При защищённом и закрытом наследовании объект производного класса не является 
объектом базового класса.
(см. таблицу в Дайтеле).

Множественное наследование:

class Derived : public Base1, public Base2 {
    ...
}

3) Возможно переопределение фукнции-элемента в производном классе с добавлениями
дополнительных возможностей:

void HourlyWorker::print() const {  // Переопределение функции производного класса
    Employee::print();  // Вызов функции базового класса
    cout << "является рабочим с почасовой оплатой" << ...   // Доп. возможности.
}

4) Абстрактный класс - базовый класс, для которого 'не создаётся объект',
т.к. он слишком общий. Класс считается абстрактным, если в нём определена
хотя бы одна чисто виртуальная функция (pure virtual func):

virtual void draw() const = 0; // Инициализатор = 0, нулевое тело функции.

Если производный класс не описывает чисто виртуальную функцию, то такой класс
тоже является абстрактным.

Абстрактные классы могут составлять несколько верхних уровней иерархии классов,
например, абстрактный класс Shape может иметь 2 абстрактных класса: 
TwoDemensionalObject и FreeDimensionalObject. А их производные классы, в свою
очередь, уже являются обычными классами.

5) Полиморфизм - возможность для объектов разных классов, связанных с помощью
наследования, реагировать различным образом при обращении к одной и той же
функции-элементу. Полиморфизм реализуется посредством виртуальных функций.

6) Шаблоны классов называют параметризованными типами, так как они имеют один
или большее количество параметров типа, определяющих надстройку родового шаблона
класса на специфический тип данных при создании объекта класса.